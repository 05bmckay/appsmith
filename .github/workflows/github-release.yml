name: Appsmith Github Release Workflow

# This workflow builds Docker images for server and client, and then pushes them to Docher Hub.
# The docker-tag with which this push happens in the release tag (e.g., v1.2.3 etc.).
# In addition to the above tag, unless the git-tag matches `*beta*`, we also push to the `latest` docker-tag.
# This workflow does NOT run tests.
# This workflow is automatically triggered when a relese is created on GitHub.

on:
  # Ref: <https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#release>.
  release:
    types:
      # Unlike the `released` event, the `published` event triggers for pre-releases as well.
      - released
      - edited
      - deleted

jobs:
  prelude:
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.get_version.outputs.tag }}
      version: ${{ steps.get_version.outputs.version }}
      is_beta: ${{ steps.get_version.outputs.is_beta }}

    steps:
      - name: Get the version
        id: get_version
        run: |
          tag="${GITHUB_REF#refs/tags/}"
          echo "::set-output name=version::${tag#v}"
          echo "::set-output name=tag::$tag"
          if [[ $tag == *"beta"* ]]; then
            echo "::set-output name=is_beta::true"
          else
            echo "::set-output name=is_beta::false"
          fi

  build-client:
    needs:
      - prelude

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: app/client

    steps:
      # Checkout the code
      - uses: actions/checkout@v2

      - name: Use Node.js 10.16.3
        uses: actions/setup-node@v1
        with:
          node-version: "10.16.3"

      # Retrieve npm dependencies from cache. After a successful run, these dependencies are cached again
      - name: Cache npm dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-yarn-dependencies
        with:
          # npm dependencies are stored in `~/.m2` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-

        # Install all the dependencies
      - name: Install dependencies
        run: yarn install

      - name: Set the build environment based on the branch
        id: vars
        run: |
          REACT_APP_ENVIRONMENT="PRODUCTION"
          echo ::set-output name=REACT_APP_ENVIRONMENT::${REACT_APP_ENVIRONMENT}

      - name: Create the bundle
        run: |
          REACT_APP_ENVIRONMENT=${{steps.vars.outputs.REACT_APP_ENVIRONMENT}} \
          REACT_APP_FUSIONCHARTS_LICENSE_KEY=${{ secrets.APPSMITH_FUSIONCHARTS_LICENSE_KEY }} \
          REACT_APP_SEGMENT_CE_KEY=${{ secrets.APPSMITH_SEGMENT_CE_KEY }} \
          REACT_APP_VERSION_ID=${{ needs.prelude.outputs.version }} \
          REACT_APP_VERSION_RELEASE_DATE=$(date +%Y-%m-%d) \
          yarn build

      # Build Docker image and push to Docker Hub
      - name: Push production image to Docker Hub with commit tag
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_ORGANIZATION }}/appsmith-editor:${{needs.prelude.outputs.tag}} .

          # Only build & tag with latest if the tag doesn't contain beta
          if [[ ! ${{needs.prelude.outputs.tag}} == *"beta"* ]]; then
            docker build -t ${{ secrets.DOCKER_HUB_ORGANIZATION }}/appsmith-editor:latest .
          fi

          echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_HUB_ORGANIZATION }}/appsmith-editor

  build-server:
    needs:
      - prelude

    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: app/server

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      # Setup Java
      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      # Retrieve maven dependencies from cache. After a successful run, these dependencies are cached again
      - name: Cache maven dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-maven-dependencies
        with:
          # maven dependencies are stored in `~/.m2` on Linux/macOS
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Get release notes
        run: |
          repo="${{ github.repository }}"
          query='{
            repository(name: "'${repo#*/}'", owner: "'${repo%/*}'") {
              releases(orderBy: {field: NAME, direction: DESC}, first: 30) {
                nodes {
                  tagName
                  name
                  url
                  isDraft
                  isPrerelease
                  createdAt
                  publishedAt
                }
                totalCount
              }
            }
          }'
          processor='import sys, json; data = json.load(sys.stdin)["data"]["repository"]["releases"]; data["nodes"] = [n for n in data["nodes"] if not any([n.pop("isDraft"), n.pop("isPrerelease")])][:10]; print(json.dumps(data))'
          curl \
            --header 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'Content-Type: application/json' \
            --data-raw "$(python -c "import json; print(json.dumps({'query': '''$query'''}))")" \
            --url 'https://api.github.com/graphql' \
            | python -c "$processor" \
            | tee appsmith-server/src/main/resources/release-notes.json

      - name: Get release notes
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const query = `query($owner: String!, $name: String!) {
              repository(owner: $owner, name: $name) {
                releases(orderBy: {field: NAME, direction: DESC}, first: 30) {
                  nodes {
                    tagName
                    name
                    url
                    isDraft
                    isPrerelease
                    createdAt
                    publishedAt
                  }
                  totalCount
                }
              }
            }`
            const options = {
              owner: context.repo.owner,
              name: context.repo.repo,
            }
            const result = await github.graphql(query, options)
            const nodes = []
            for (const node of result.repository.releases.nodes) {
              if (!node.isDraft && !node.isPrerelease) {
                delete node.isDraft
                delete node.isPrerelease
                nodes.push(node)
              }
              if (nodes.length === 10) {
                break
              }
            }
            console.log(JSON.stringify({ nodes, totalCount: result.repository.releases.totalCount }))

      # Build the code
      - name: Build without running any tests
        run: |
          mvn --batch-mode versions:set \
            -DnewVersion=${{ needs.prelude.outputs.version }} \
            -DgenerateBackupPoms=false \
            -DprocessAllModules=true
          mvn --batch-mode package -DskipTests

      # Build Docker image and push to Docker Hub
      - name: Push image to Docker Hub
        run: |
          docker build --build-arg APPSMITH_SEGMENT_CE_KEY=${{ secrets.APPSMITH_SEGMENT_CE_KEY }} -t ${{ secrets.DOCKER_HUB_ORGANIZATION }}/appsmith-server:${{needs.prelude.outputs.tag}} .

          # Only build & tag with latest if the tag doesn't contain beta
          if [[ ! ${{needs.prelude.outputs.tag}} == *"beta"* ]]; then
            docker build --build-arg APPSMITH_SEGMENT_CE_KEY=${{ secrets.APPSMITH_SEGMENT_CE_KEY }} -t ${{ secrets.DOCKER_HUB_ORGANIZATION }}/appsmith-server:latest .
          fi

          echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_HUB_ORGANIZATION }}/appsmith-server
