package com.appsmith.git.service;

import com.appsmith.external.git.GitExecutor;
import com.appsmith.git.helpers.SshTransportConfigCallback;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.TransportConfigCallback;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.springframework.beans.factory.annotation.Value;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

public class GitExecutorImpl implements GitExecutor {

    @Value("${appsmith.git.root:./container-volumes/git-storage}")
    private String gitRootPath;

    private static final String CLONE_FAILURE_API = "failed";

    /* Clone the repo to the file path
    *  Children branches - containerVolume/orgId/defaultAppId/repo/branchName/applicationData
    *  Default branch - containerVolume/orgId/defaultAppId/repo/applicationData
    *  @param repoPath - combination of orgId and defaultId
    *  @param remoteUrl - ssh url of the git repo(we support cloning via ssh url only with deploy key)
    *  @param privateKey - generated by us and specific to the defaultApplication
    *  @param publicKey - generated by us and specific to the defaultApplication
    * */
    @Override
    public String cloneApp(String repoPath,
                           String repoName,
                           String remoteUrl,
                           String privateSshKey,
                           String publicSshKey) throws GitAPIException {
        File file = getFilePath(repoPath, repoName);
        final TransportConfigCallback transportConfigCallback = new SshTransportConfigCallback(privateSshKey, publicSshKey);
        try(Git result = Git.cloneRepository()
                .setURI(remoteUrl)
                .setTransportConfigCallback(transportConfigCallback)
                .setDirectory(file)
                .call()) {
            return result.getRepository().getBranch();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return CLONE_FAILURE_API;
    }

    /* There might be a case where the name conflicts can occur while creating the file.
    *  This function creates the directory and handles the name conflicts by appending the number to the repoName
    *  @param repoPath - combination of orgId, defaultApplicationId
    *  @param repoName - the git repo name
    *  @return file reference. Folder created Ex - gitRootPath/orgId/defaultApplicationId/repoName
    * */
    private File getFilePath(String repoPath, String repoName) {
        Path filePath = Paths.get(gitRootPath, repoPath, repoName);
        File file = new File(String.valueOf(filePath));
        if (file.exists()) {
            file.delete();
        }
        file.mkdir();
        return file;
    }
}
